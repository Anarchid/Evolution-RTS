
#include "sfxtype.h"
#include "exptype.h"

piece base, doorsright, doorsleft, frontsouthdoors, frontnorthdoors, rearsouthdoors, rearnorthdoors, nanopoint;

static-var  Maya;

// Signal definitions (they must be distincts power of 2)
#define SIG_ACTIVATE 2
#define SIG_BUILDING 4

#define NANO 1024+0
#define FX1 2048
#define FX2 2049
#define FX3 2050

SmokeUnit()
{
   var healthpercent, sleeptime, smoketype;
   while( TRUE )
   {
      healthpercent = get HEALTH;
      if( healthpercent < 66 )
      {
         smoketype = SFXTYPE_BLACKSMOKE;
         if( Rand( 1, 66 ) < healthpercent )
            smoketype = SFXTYPE_WHITESMOKE;
         emit-sfx smoketype from base;
      }
      sleeptime = healthpercent * 50;
      if( sleeptime < 200 )
         sleeptime = 200;
      sleep sleeptime;
   }
}

Create()
{
   Maya=TRUE;
   while( get BUILD_PERCENT_LEFT )
      sleep 400;
   start-script SmokeUnit();
//   turn sfxpoint1 to x-axis <-90> now;
}

QueryNanoPiece(piecenum)
{
   piecenum = nanopoint;
}

Activate()
{
   // Kill any other Activate or Deactivate:
   signal SIG_ACTIVATE;
   // Flag self so it can be killed:
   set-signal-mask SIG_ACTIVATE;
   // Local variables
   var FrameM14,r;
   // Open animation:
   turn frontnorthdoors to x-axis <90> speed <100>;
   turn frontsouthdoors to x-axis <-90> speed <100>;
   turn rearnorthdoors to x-axis <90> speed <100>;
   turn rearsouthdoors to x-axis <-90> speed <100>;
   wait-for-turn frontnorthdoors around x-axis;
   wait-for-turn frontsouthdoors around x-axis;
   wait-for-turn rearnorthdoors around x-axis;
   wait-for-turn rearsouthdoors around x-axis;
   turn doorsright to z-axis <90> speed <100>;
   turn doorsleft to z-axis <-90> speed <100>;
   // Try to open the yard
   set YARD_OPEN to TRUE;
   // If yard not open, tell units around to bugger off until yard is open
   while( !get YARD_OPEN )
   {
      set BUGGER_OFF to TRUE;
      sleep 1500;
      set YARD_OPEN to TRUE;
   }
   set BUGGER_OFF to FALSE;
   // Now yard is open.
   // Allow the nano to flow:
   set INBUILDSTANCE to TRUE;

   // The idle but activated animation
   FrameM14=0;
   while(TRUE)
   {
      if(Maya)
         // Allow the nano to flow
         set INBUILDSTANCE to TRUE;
      while(Maya)
      {
         // Activated animation when having tech
         sleep 5;
         ++FrameM14;
         if(FrameM14==15)
         {
            FrameM14=0;
         }
      }
      if(!Maya)
         // Cut the nano
         set INBUILDSTANCE to FALSE;
      while(!Maya)
      {
         // Activated animation when needing tech
         sleep 200;
      }
   }
}

Deactivate()
{
   // Kill any other Activate or Deactivate:
   signal SIG_ACTIVATE;
   // Flag self so it can be killed:
   set-signal-mask SIG_ACTIVATE;
   // Switch off the nano faucet:
   set INBUILDSTANCE to FALSE;
   // Stop wheel spinning
   // Try to close the yard
   set YARD_OPEN to FALSE;
   // If yard not closed, tell units around to bugger off until yard is closed
   while( get YARD_OPEN )
   {
      set BUGGER_OFF to TRUE;
      sleep 1500;
      set YARD_OPEN to FALSE;
   }
   set BUGGER_OFF to FALSE;
   // Now yard is closed.
   // Close animation:
   turn doorsright to z-axis <0> speed <75>;
   turn doorsleft to z-axis <0> speed <75>;
   wait-for-turn doorsright around z-axis;
   wait-for-turn doorsleft around z-axis;
   turn frontnorthdoors to x-axis <0> speed <75>;
   turn frontsouthdoors to x-axis <0> speed <75>;
   turn rearnorthdoors to x-axis <0> speed <75>;
   turn rearsouthdoors to x-axis <0> speed <75>;
}

StartBuilding()
{
   signal SIG_BUILDING; // Kill any other StartBuilding
   set-signal-mask SIG_BUILDING; // Be killable
   while(TRUE)
   {
   emit-sfx NANO from nanopoint;
   sleep 300;
   }
}

StopBuilding()
{
   signal SIG_BUILDING; // Kill StartBuilding
}

QueryBuildInfo(piecenum)
{
   piecenum = nanopoint;
}

TechLost()
{
   Maya=FALSE;
}

TechGranted()
{
   Maya=TRUE;
}

Killed(severity, corpsetype)
{
   if( severity <= 25 )
   {
      corpsetype = 1;
      explode base type BITMAPONLY | BITMAP1;
      return (0);
   }
   if( severity <= 50 )
   {
      corpsetype = 2;
      explode base type BITMAPONLY | BITMAP1;
      return (0);
   }
   if( severity <= 99 )
   {
      corpsetype = 3;
      explode base type BITMAPONLY | BITMAP1;
      return (0);
   }
   corpsetype = 3;
   explode base type BITMAPONLY | BITMAP1;
}