#define TA // This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece base, turret, barrel1, firepoint1, sfxpoint1; // these are the pieces of the model

static-var CanFire;

// Signal definitions
#define SIG_AIM 2 // this is a aim define <- o_O This is a kill flag

// Custom SFX
#define gdmarty 1024+0
#define gdmarty1 1025+0

SmokeUnit()// this is a standard smoke point define
{
	var healthpercent, sleeptime, smoketype;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
				smoketype = SFXTYPE_WHITESMOKE;
			emit-sfx smoketype from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
			sleeptime = 200;
		sleep sleeptime;
	}
}

cannotfire()
{
   while( TRUE )
   {
      if (!CanFire)
      {
		emit-sfx 1026 from sfxpoint1;
	  }
	sleep 1500;
   }
}

Create() // tells it what to do on creation
{
	CanFire=FALSE;
	while( get BUILD_PERCENT_LEFT )
		sleep 400;
	start-script SmokeUnit();
	start-script cannotfire();
}

RestoreAfterDelay() // restore function to turn the turret and so forth back to start
{
	sleep 3000;
	turn turret to y-axis <0> speed <60>;
	turn barrel1 to x-axis <0> speed <30>;
}

AimWeapon1(heading, pitch) // aiming animation and firing authorization
{
	signal SIG_AIM;
	set-signal-mask SIG_AIM;
	while(!CanFire)
		sleep 200;
	turn turret to y-axis heading speed <225>;
	turn barrel1 to x-axis <0> - pitch speed <150>;
	wait-for-turn turret around y-axis;
	wait-for-turn barrel1 around x-axis;
        emit-sfx gdmarty from firepoint1; 
	start-script RestoreAfterDelay();
	return (1);
}

FireWeapon1() // what do while firing, fires 1 barrel then the next , and resets
{
	emit-sfx gdmarty1 from firepoint1;
}

AimFromWeapon1(piecenum) // where it aims the weapon from
{
	piecenum = barrel1;
}

QueryWeapon1(piecenum) // where the shot is created at
{
	piecenum = firepoint1;
}

TechLost()
{
	CanFire=FALSE;
	signal SIG_AIM;
	stop-spin turret around y-axis decelerate <10>;
	stop-spin barrel1 around x-axis decelerate <10>;
}

TechGranted()
{
	CanFire=TRUE;
}

Killed(severity, corpsetype) // how it explodes
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode turret type BITMAPONLY | BITMAP1;
		explode barrel1 type BITMAPONLY | BITMAP4;
		return (0);
	}
	if( severity <= 80 )
	{
		corpsetype = 2;
		explode turret type BITMAPONLY | BITMAP4;
		explode barrel1 type SHATTER | BITMAP4;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode turret type BITMAPONLY | BITMAP1;
		explode barrel1 type SHATTER | BITMAP4;
		return (0);
	}
	corpsetype = 3;
	explode turret type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1;
	explode barrel1 type SHATTER | EXPLODE_ON_HIT | BITMAP4;
}
