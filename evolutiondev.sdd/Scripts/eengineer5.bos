piece base, doorleft, doorright, nanopoint1, penis, dirt, wheel;

#include "springdefs.h"
#define SIG_BUILD 8
#define nanoflame 1024+0

static-var bMoving, terraintype, building, moving;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
   while( get BUILD_PERCENT_LEFT )
   {
      sleep 400;
   }
   while( TRUE )
   {
      healthpercent = get HEALTH;
      if( healthpercent < 66 )
      {
         smoketype = 256 | 2;
         if( Rand( 1, 66 ) < healthpercent )
         {
            smoketype = 256 | 1;
         }
         emit-sfx 1025 from wheel;
      }
      sleeptime = healthpercent * 50;
      if( sleeptime < 200 )
      {
         sleeptime = 200;
      }
      sleep sleeptime;
   }
}

EmitWakes()
{
   while( TRUE )
   {
      if( bMoving )
      {
         emit-sfx 2 from base;
      }
      sleep 300;
   }
}

setSFXoccupy(setSFXoccupy_argument)
{
terraintype = setSFXoccupy_argument;

                if(terraintype == 2)
      {
                move base to y-axis [-0.85] speed [50];
                set UPRIGHT to 1;
                }
      else
      {
                move base to y-axis [0.0] speed [50];
                set UPRIGHT to 0;
                }
                if(terraintype == 4)
      {
                move base to y-axis [0] speed [50];
                set UPRIGHT to 0;
                }
      else
      {
                move base to y-axis [-0.85] speed [50];
                set UPRIGHT to 1;
                }
}

Thrust()
{
   while( TRUE )
   {
      if (moving)
      {
              emit-sfx 1025 + 0 from dirt;
                }
        sleep 400;
   }
}

/*
Buildingfx()
{
   while(building)
   {

//              emit-sfx nanoflame from nanopoint1;
//              emit-sfx nanoflame from nano2;

        sleep 5;
   }
}

*/

buildflame()
{
   while( TRUE )
   {
      if (building)    
      {
              emit-sfx nanoflame from nanopoint1;
      				
      }
        sleep 600;    
   }
}

Create()
{
        start-script setSFXoccupy();
        start-script Thrust();
        start-script EmitWakes();
        start-script SmokeUnit();
        start-script buildflame();
}

QueryWeapon1(piecenum)
{
   piecenum=nanopoint1;
}

AimFromWeapon1(piecenum)
{
   piecenum=penis;
}

AimWeapon1(h,p)
{
   return 0;
}

StartBuilding(heading, pitch)
{
   signal SIG_BUILD;
   set-signal-mask SIG_BUILD;
   turn doorleft to y-axis <90> speed <100.000000>;
   turn doorright to y-axis <-90> speed <100.000000>;
        wait-for-turn doorleft around y-axis;
        wait-for-turn doorright around y-axis;
   move penis to z-axis [4] speed [1];
   set INBUILDSTANCE to 1;
   building = 1;
   while (1) {
      emit-sfx 2048 from nanopoint1;
      sleep 30;
   }
}

StopBuilding()
{
   signal SIG_BUILD;
   set-signal-mask SIG_BUILD;
   set INBUILDSTANCE to 0;
   building = 0;
        move penis to z-axis [0] speed [2];
   turn doorleft to y-axis <0> speed <50.000000>;
   turn doorright to y-axis <0> speed <50.000000>;
        wait-for-turn doorleft around y-axis;
        wait-for-turn doorright around y-axis;

}

QueryNanoPiece(piecenum)
{
      piecenum = nanopoint1;
}


StartMoving()
{
   bMoving = TRUE;
   moving=1;
}

StopMoving()
{
   bMoving = FALSE;
   moving=0;
}

Killed(severity, corpsetype) // how it explodes 
{ 
	corpsetype = 1; 
	explode doorleft type EXPLODE_ON_HIT;
	explode doorright type EXPLODE_ON_HIT;
	explode penis type EXPLODE_ON_HIT;
	explode wheel type EXPLODE_ON_HIT;
} 