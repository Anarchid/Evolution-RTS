#define TA // This is a TA script 

#include "sfxtype.h" 
#include "exptype.h" 

piece hull, turret, barrel1, firepoint1; // these are the pieces of the model 

static-var gun_1, terraintype, bmoving; // these are the variables 

#define gdmarty 1024+0 // this is a custom explosion generator thinging 

// Signal definitions 
#define SIG_AIM 2 // this is a aim define 


SmokeUnit(healthpercent, sleeptime, smoketype) // this is a standard smoke point define 
{ 
while( get BUILD_PERCENT_LEFT ) 
{ 
sleep 400; 
} 
while( TRUE ) 
{ 
healthpercent = get HEALTH; 
if( healthpercent < 66 ) 
{ 
smoketype = 256 | 2; 
if( Rand( 1, 66 ) < healthpercent ) 
{ 
smoketype = 256 | 1; 
} 
emit-sfx smoketype from turret; 
} 
sleeptime = healthpercent * 50; 
if( sleeptime < 200 ) 
{ 
sleeptime = 200; 
} 
sleep sleeptime; 
} 
} 

EmitWakes()
{
	while( TRUE )
	{
		if( bMoving )
		{
			emit-sfx 2 from hull;
		}
		sleep 300;
	}
}

setSFXoccupy(setSFXoccupy_argument)
{	
terraintype = setSFXoccupy_argument;	

                if(terraintype == 2)
		{
                move hull to y-axis [-0.85] speed [50]; 
                set UPRIGHT to 1;	
                }
		else
		{
                move hull to y-axis [0.0] speed [50];
                set UPRIGHT to 0;	
                }
                if(terraintype == 4)
		{
                move hull to y-axis [0] speed [50]; 
                set UPRIGHT to 0;	
                }
		else
		{
                move hull to y-axis [-0.85] speed [50];
                set UPRIGHT to 1;	
                }
}

Create() // tells it what to do on creation 
{
        start-script setSFXoccupy(); 
        start-script EmitWakes(); 
start-script SmokeUnit(); 
} 

RestoreAfterDelay() // restore function to turn the turret and so forth back to start 
{ 
sleep 3000; 
turn turret to y-axis <0> speed <60>;
turn barrel1 to x-axis <0> speed <30>;  
} 

AimWeapon1(heading, pitch) // single weapon with 2 fires this tell sit what to do while aiming 
{ 
while( gun_1 >= 1) 
{ 
sleep 100; 
} 
signal SIG_AIM; 
set-signal-mask SIG_AIM; 
turn turret to y-axis heading speed <225>;
turn barrel1 to x-axis <0> - pitch speed <150>; 
wait-for-turn turret around y-axis;
wait-for-turn barrel1 around x-axis;  
start-script RestoreAfterDelay(); 
return (1); 
} 

FireWeapon1() // what do while firing, fires 1 barrel then the next , and resets 
{ 
if( gun_1 == 0 ) 
{ 
emit-sfx gdmarty from firepoint1; 
move barrel1 to z-axis [-2] speed [500]; 
sleep 75; 
move barrel1 to z-axis [0] speed [1]; 
}
gun_1 = gun_1 + 1; 
if( gun_1 >= 1 ) 
{ 
gun_1=0; 
} 
} 

AimFromWeapon1(piecenum) // where it aims the weapon from 
{ 
piecenum = turret; 
} 

QueryWeapon1(piecenum) // where the shot is called from 
{ 
if( gun_1 == 0 ) 
{ 
piecenum = firepoint1; 
} 
} 

SweetSpot(piecenum) // not sure what this is for 
{ 
piecenum = hull; 
} 

Killed(severity, corpsetype) // how it explodes 
{ 
if( severity <= 25 ) 
{ 
corpsetype = 1; 
explode hull type BITMAPONLY | BITMAP1; 
explode barrel1 type BITMAPONLY | BITMAP1;  
explode turret type BITMAPONLY | BITMAP4; 
return (0); 
} 
if( severity <= 80 ) 
{ 
corpsetype = 2; 
explode hull type BITMAPONLY | BITMAP4; 
explode barrel1 type FALL | BITMAP1; 
explode turret type SHATTER | BITMAP4; 
return (0); 
} 
if( severity <= 99 ) 
{ 
corpsetype = 3; 
explode hull type BITMAPONLY | BITMAP1; 
explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1; 
explode turret type SHATTER | BITMAP4; 
return (0); 
} 
corpsetype = 3; 
explode barrel1 type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1; 
explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4; 
} 
