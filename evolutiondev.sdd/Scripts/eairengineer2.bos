piece base, nanopoint1, nanopoint2, frontwings, fengine1, fengine2, rearwings, rengine1, rengine2, righttip, lefttip;

#include "springdefs.h"
#define SIG_BUILD 8
#define jethtrail 1024+0
#define nanoflame 1025+0

static-var bMoving, terraintype, building, moving, flames, spray;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
   while( get BUILD_PERCENT_LEFT )
   {
      sleep 400;
   }
   while( TRUE )
   {
      healthpercent = get HEALTH;
      if( healthpercent < 66 )
      {
         smoketype = 256 | 2;
         if( Rand( 1, 66 ) < healthpercent )
         {
            smoketype = 256 | 1;
         }
         emit-sfx 1026 from base;
      }
      sleeptime = healthpercent * 50;
      if( sleeptime < 200 )
      {
         sleeptime = 200;
      }
      sleep sleeptime;
   }
}

Thrust()
{
   while( TRUE )
   {
      if (moving)
      {
              emit-sfx jethtrail from fengine1;
              emit-sfx jethtrail from fengine2;
              emit-sfx jethtrail from rengine1;
              emit-sfx jethtrail from rengine2;
                }
        sleep 5;
   }
}

buildflame()
{
   while( TRUE )
   {
      if (building)    
      {
              emit-sfx nanoflame from nanopoint1;
              emit-sfx nanoflame from nanopoint2;
      				
      }
        sleep 600;    
   }
}

Create()
{
//        start-script Thrust();
        start-script SmokeUnit();
//         turn fengine1 to y-axis <180> now;
//         turn fengine2 to y-axis <180> now;
//         turn rengine1 to y-axis <180> now;
//         turn rengine2 to y-axis <180> now;
		spray = nanopoint1;
	start-script buildflame();
}

QueryWeapon1(piecenum)
{
   if( spray == 0 )
	{
		piecenum = nanopoint1;
	}
	if( spray == 1 )
	{
		piecenum = nanopoint2;
	}
	++spray;
	if( spray >= 2 )
	{
		spray = 0;
	}
}

AimFromWeapon1(piecenum)
{
   if( spray == 0 )
	{
		piecenum = nanopoint1;
	}
	if( spray == 1 )
	{
		piecenum = nanopoint2;
	}
	++spray;
	if( spray >= 2 )
	{
		spray = 0;
	}
}

AimWeapon1(h,p)
{
   return 0;
}

StartBuilding(heading, pitch)
{
   signal SIG_BUILD;
   set-signal-mask SIG_BUILD;
   set INBUILDSTANCE to 1;
   building = 1;
   while (1) {
	  spin lefttip around y-axis speed <50.005495>;
	  spin righttip around y-axis speed <50.005495>;
      sleep 30;
   }
}

StopBuilding()
{
   signal SIG_BUILD;
   set-signal-mask SIG_BUILD;
   set INBUILDSTANCE to 0;
   building = 0;
   stop-spin lefttip around y-axis decelerate <15.000000>; 
   stop-spin righttip around y-axis decelerate <15.000000>; 
}

StartMoving()
{
   bMoving = TRUE;
   moving=1;
}

StopMoving()
{
   bMoving = FALSE;
   moving=0;
}

MoveRate0()
{
   flames=0;
   turn frontwings to x-axis <-90.000000> speed <150.000000>;
   turn rearwings to x-axis <-90.000000> speed <150.000000>;
}
MoveRate1()
{
   flames=0;
   turn frontwings to x-axis <-70.005495> speed <150.000000>;
   turn rearwings to x-axis <-70.005495> speed <150.000000>;
}
MoveRate2()
{
   flames=1;
   turn frontwings to x-axis <0.000000> speed <150.000000>;
   turn rearwings to x-axis <0.000000> speed <150.000000>;
}

Killed(severity, corpsetype) // how it explodes 
{ 
	corpsetype = 1; 
	explode lefttip type EXPLODE_ON_HIT;
	explode righttip type EXPLODE_ON_HIT;
	explode base type EXPLODE_ON_HIT;
	explode frontwings type EXPLODE_ON_HIT;
	explode rearwings type EXPLODE_ON_HIT;
} 
