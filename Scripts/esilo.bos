#define TA // This is a TA script 

#include "sfxtype.h" 
#include "exptype.h" 

piece base, wheel1, wheel2, door1, door2, nuke, firepoint1, sfxpoint1; // these are the pieces of the model  

static-var CanFire;

// Signal definitions 
#define SIG_AIM 2

SmokeUnit()// this is a standard smoke point define
{
	var healthpercent, sleeptime, smoketype;
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = SFXTYPE_BLACKSMOKE;
			if( Rand( 1, 66 ) < healthpercent )
				smoketype = SFXTYPE_WHITESMOKE;
			emit-sfx 1025 from base;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
			sleeptime = 200;
		sleep sleeptime;
	}
}

cannotfire()
{
   while( TRUE )
   {
      if (!CanFire)
      {
		emit-sfx 1024 from sfxpoint1;
	  }
	sleep 1500;
   }
}

Create() // tells it what to do on creation 
{ 
	CanFire=FALSE;
	while( get BUILD_PERCENT_LEFT )
		sleep 400;
	start-script SmokeUnit();
	start-script cannotfire();
} 

RestoreAfterDelay() // restore function to turn the turret and so forth back to start 
{ 
sleep 3000; 
stop-spin wheel1 around z-axis decelerate <5.000000>;
stop-spin wheel2 around z-axis decelerate <5.000000>;
	turn door1 to z-axis <0> speed <50>;
	turn door2 to z-axis <0> speed <50>;
	move nuke to y-axis [0] speed [10];
	wait-for-turn door1 around z-axis; 
	wait-for-turn door2 around z-axis;
	wait-for-move nuke along y-axis;
	show nuke;
} 

AimWeapon1(heading, pitch) // single weapon with 2 fires this tell sit what to do while aiming 
{ 
signal SIG_AIM; 
set-signal-mask SIG_AIM;
	while(!CanFire)
		sleep 200;
	turn door1 to z-axis <90> speed <100>;
	turn door2 to z-axis <-90> speed <100>;
	spin wheel1 around z-axis speed <100.005495>;  
	spin wheel2 around z-axis speed <100.005495>;
	move nuke to y-axis [40] speed [10];
	wait-for-turn door1 around z-axis; 
	wait-for-turn door2 around z-axis; 
	wait-for-move nuke along y-axis;
start-script RestoreAfterDelay(); 
return (1);  
} 

FireWeapon1() // what do while firing, fires 1 barrel then the next , and resets 
{
hide nuke;
} 

AimFromWeapon1(piecenum) // where it aims the weapon from 
{ 
piecenum = base; 
} 

QueryWeapon1(piecenum) // where the shot is called from 
{ 
piecenum = firepoint1; 
} 

TechLost()
{
	CanFire=FALSE;
	signal SIG_AIM;

}

TechGranted()
{
	CanFire=TRUE;
}

Killed(severity, corpsetype) // how it explodes 
{ 
	corpsetype = 1; 
	explode wheel1 type EXPLODE_ON_HIT;
	explode wheel2 type EXPLODE_ON_HIT;
	explode door1 type EXPLODE_ON_HIT;
	explode door2 type EXPLODE_ON_HIT;
	explode nuke type EXPLODE_ON_HIT;
} 
