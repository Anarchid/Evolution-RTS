#define TA // This is a TA script 

#include "sfxtype.h" 
#include "exptype.h" 

piece base, turret, barrel1, firepoint1; // these are the pieces of the model 

static-var terraintype, bMoving, bAiming; // these are the variables 

#define gdmarty 1024+0 // this is a custom explosion generator thinging 
#define beam	2048+1
// Signal definitions 
#define SIG_AIM 2 // this is an aim define 
#define SIG_AIM2 4

SmokeUnit(healthpercent, sleeptime, smoketype) // this is a standard smoke point define 
{ 
while( get BUILD_PERCENT_LEFT ) 
{ 
sleep 400; 
} 
while( TRUE ) 
{ 
healthpercent = get HEALTH; 
if( healthpercent < 66 ) 
{ 
smoketype = 256 | 2; 
if( Rand( 1, 66 ) < healthpercent ) 
{ 
smoketype = 256 | 1; 
} 
emit-sfx smoketype from base; 
} 
sleeptime = healthpercent * 50; 
if( sleeptime < 200 ) 
{ 
sleeptime = 200; 
} 
sleep sleeptime; 
} 
} 

EmitWakes()
{
	while( TRUE )
	{
		if( bMoving )
		{
			emit-sfx 2 from base;
		}
		sleep 300;
	}
}

setSFXoccupy(setSFXoccupy_argument)
{	
terraintype = setSFXoccupy_argument;	

                if(terraintype == 2)
		{
                move base to y-axis [-0.85] speed [50]; 
                set UPRIGHT to 1;	
                }
		else
		{
                move base to y-axis [0.0] speed [50];
                set UPRIGHT to 0;	
                }
                if(terraintype == 4)
		{
                move base to y-axis [0] speed [50]; 
                set UPRIGHT to 0;	
                }
		else
		{
                move base to y-axis [-0.85] speed [50];
                set UPRIGHT to 1;	
                }
}

BeamControl()
{
	while (1)
	{
		while (bAiming==1)
		{
		emit-sfx beam from firepoint1;
		sleep 20;
		}
	sleep 1000;
	}
}


Create() // tells it what to do on creation 
{
	start-script setSFXoccupy(); 
	start-script EmitWakes(); 
	start-script SmokeUnit(); 
	start-script BeamControl();
} 

RestoreAfterDelay() // restore function to turn the turret and so forth back to start 
{ 
sleep 3000; 
bAiming=0;
turn turret to y-axis <0> speed <60>;
turn barrel1 to x-axis <0> speed <30>;  
} 

AimWeapon1(heading, pitch) // single weapon with 2 fires this tell sit what to do while aiming 
{
signal SIG_AIM; 
set-signal-mask SIG_AIM;
bAiming=1; 
turn turret to y-axis heading speed <600>;
turn barrel1 to x-axis <0> - pitch speed <150>; 
wait-for-turn turret around y-axis;
wait-for-turn barrel1 around x-axis;  
start-script RestoreAfterDelay(); 
return (0); 
} 

FireWeapon1(heading)
{
	return (0);
}

AimFromWeapon1(piecenum) // where it aims the weapon from 
{ 
piecenum = turret; 
} 

QueryWeapon1(piecenum) // where the shot is called from 
{ 
piecenum = firepoint1; 
} 


Killed(severity, corpsetype) // how it explodes 
{ 
if( severity <= 25 ) 
{ 
corpsetype = 1; 
explode base type BITMAPONLY | BITMAP1; 
explode turret type BITMAPONLY | BITMAP4; 
return (0); 
} 
if( severity <= 80 ) 
{ 
corpsetype = 2; 
explode base type BITMAPONLY | BITMAP4; 
explode turret type SHATTER | BITMAP4; 
return (0); 
} 
if( severity <= 99 ) 
{ 
corpsetype = 3; 
explode base type BITMAPONLY | BITMAP1; 
explode turret type SHATTER | BITMAP4; 
return (0); 
} 
corpsetype = 3; 
explode base type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1; 
explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4; 
} 
