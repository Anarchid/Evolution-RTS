#define TA			// This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  engineer, nano1, nano2, nano3;

static-var Static_Var_1, Static_Var_3, Static_Var_5, statechg_DesiredState, statechg_StateChanging, bMoving, terraintype;

SmokeUnit(healthpercent, sleeptime, smoketype)
{
	while( get BUILD_PERCENT_LEFT )
	{
		sleep 400;
	}
	while( TRUE )
	{
		healthpercent = get HEALTH;
		if( healthpercent < 66 )
		{
			smoketype = 256 | 2;
			if( Rand( 1, 66 ) < healthpercent )
			{
				smoketype = 256 | 1;
			}
			emit-sfx smoketype from engineer;
		}
		sleeptime = healthpercent * 50;
		if( sleeptime < 200 )
		{
			sleeptime = 200;
		}
		sleep sleeptime;
	}
}

Go()
{
	turn engineer to y-axis Static_Var_1 speed <160.000000>;
        wait-for-turn engineer around y-axis;
        Static_Var_3 = 1;
	if( Static_Var_3 )
	{

	}
	sleep 15;
	set INBUILDSTANCE to 1;
}

Stop()
{
	turn engineer to y-axis <0.000000> speed <160.000000>;
        wait-for-turn engineer around y-axis;
        set INBUILDSTANCE to 0;
	if( Static_Var_3 )
	{

	}
	sleep 20;
	Static_Var_3 = 0;
}

InitState()
{
	statechg_DesiredState = TRUE;
	statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
	if( statechg_StateChanging )
	{
		statechg_DesiredState = requestedstate;
		return (0);
	}
	statechg_StateChanging = TRUE;
	currentstate = statechg_DesiredState;
	statechg_DesiredState = requestedstate;
	while( statechg_DesiredState != currentstate )
	{
		if( statechg_DesiredState == 0 )
		{
			call-script Go();
			currentstate = 0;
		}
		if( statechg_DesiredState == 1 )
		{
			call-script Stop();
			currentstate = 1;
		}
	}
	statechg_StateChanging = FALSE;
}


EmitWakes()
{
	while( TRUE )
	{
		if( bMoving )
		{
			emit-sfx 2 from engineer;
		}
		sleep 300;
	}
}

setSFXoccupy(setSFXoccupy_argument)
{	
terraintype = setSFXoccupy_argument;	

                if(terraintype == 2)
		{
                move engineer to y-axis [-0.85] speed [50]; 
                set UPRIGHT to 1;	
                }
		else
		{
                move engineer to y-axis [0.0] speed [50];
                set UPRIGHT to 0;	
                }
                if(terraintype == 4)
		{
                move engineer to y-axis [0] speed [50]; 
                set UPRIGHT to 0;	
                }
		else
		{
                move engineer to y-axis [-0.85] speed [50];
                set UPRIGHT to 1;	
                }
}

Create()
{
	Static_Var_3 = 0;
	Static_Var_1 = 0;
	call-script InitState();
        start-script setSFXoccupy(); 
        start-script EmitWakes();
        start-script SmokeUnit();
}

StartBuilding(Func_Var_1)
{
	Static_Var_1 = Func_Var_1;
	start-script RequestState(0);
}

StopBuilding()
{
	start-script RequestState(1);
}

QueryNanoPiece(piecenum)
{
	if( Static_Var_5 == 0 )
	{
		piecenum = nano1;
		Static_Var_5 = 1;
	
	}
	if( Static_Var_5 == 1 )
	{
		piecenum = nano2;
		Static_Var_5 = 2;
		return (0);
	}
	if( Static_Var_5 == 2 )
	{
		piecenum = nano3;
		Static_Var_5 = 0;

	}
}

TargetHeading(Func_Var_1)
{
	Static_Var_1 = 0 - Func_Var_1;
}

StartMoving()
{
	bMoving = TRUE;
}

StopMoving()
{
	bMoving = FALSE;
}

SweetSpot(piecenum)
{
	piecenum = engineer;
}

Killed(severity, corpsetype)
{
	if( severity <= 25 )
	{
		corpsetype = 1;
		explode engineer type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 50 )
	{
		corpsetype = 2;
		explode engineer type BITMAPONLY | BITMAP2;
		return (0);
	}
	if( severity <= 99 )
	{
		corpsetype = 3;
		explode engineer type BITMAPONLY | BITMAP2;
		return (0);
	}
	corpsetype = 3;
	explode engineer type BITMAPONLY | BITMAP2;
}
