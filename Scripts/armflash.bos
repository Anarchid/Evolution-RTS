#define TA // This is a TA script 

#include "sfxtype.h" 
#include "exptype.h" 

piece base, turret, sleeve, barrel1, barrel2, firepoint1, firepoint2, wheels1, wheels2, wheels3, wheels4, wheels5, dirt; // these are the pieces of the model 

static-var moving, gun_1, shooting_num; // these are the variables 

// #define gdscannon 1024+0 // this is a custom explosion generator thinging 

// Signal definitions 
#define SIG_AIM 2
#define SIG_AIM_2 4 // this is a aim define

#define shot 1024+0

SmokeUnit(healthpercent, sleeptime, smoketype) // this is a standard smoke point define 
{ 
while( get BUILD_PERCENT_LEFT ) 
{ 
sleep 400; 
} 
while( TRUE ) 
{ 
healthpercent = get HEALTH; 
if( healthpercent < 66 ) 
{ 
smoketype = 256 | 2; 
if( Rand( 1, 66 ) < healthpercent ) 
{ 
smoketype = 256 | 1; 
} 
emit-sfx smoketype from turret; 
} 
sleeptime = healthpercent * 50; 
if( sleeptime < 200 ) 
{ 
sleeptime = 200; 
} 
sleep sleeptime; 
} 
} 

Thrust()
{
   while( TRUE )
   {
      if (moving)    
      {
              emit-sfx 1025 + 0 from dirt;
              spin wheels1 around x-axis speed <500.005495>;
         	  spin wheels2 around x-axis speed <500.005495>;
         	  spin wheels3 around x-axis speed <500.005495>;
         	  spin wheels4 around x-axis speed <500.005495>;
         	  spin wheels5 around x-axis speed <500.005495>;
      }
      else
      {
      		  stop-spin wheels1 around x-axis decelerate <200.005495>;
         	  stop-spin wheels2 around x-axis decelerate <200.005495>;
         	  stop-spin wheels3 around x-axis decelerate <200.005495>;
         	  stop-spin wheels4 around x-axis decelerate <200.005495>;
         	  stop-spin wheels5 around x-axis decelerate <200.005495>;
      }
      sleep 400;    
   }
}

StartMoving()
{
        moving=1;
}
   
StopMoving()
{   
        moving=0; 
}

Create() // tells it what to do on creation 
{
		shooting_num=1;
        start-script Thrust(); 
        start-script SmokeUnit(); 
} 

RestoreAfterDelay() // restore function to turn the turret and so forth back to start 
{ 
sleep 3000; 
turn turret to y-axis <0> speed <60>; 
turn sleeve to x-axis <0> speed <30>;  
} 

AimWeapon1(heading, pitch) // single weapon with 2 fires this tell sit what to do while aiming 
{ 
signal SIG_AIM; 
set-signal-mask SIG_AIM; 
turn turret to y-axis heading speed <255>; 
turn sleeve to x-axis <0> - pitch speed <150>;  
wait-for-turn turret around y-axis;
wait-for-turn sleeve around x-axis;  
start-script RestoreAfterDelay(); 
return (1); 
} 

FireWeapon1() // what do while firing, fires 1 barrel then the next , and resets 
{ 
         if(shooting_num==1)
         {
         	emit-sfx 1024 from firepoint2;
         }

         if(shooting_num==2)
         {
         	emit-sfx 1024 from firepoint1;
         }
	
   shooting_num=shooting_num+1;

            if( shooting_num == 3)
            {  
            	shooting_num=1;
            }
} 

AimFromWeapon1(piecenum) // where it aims the weapon from 
{ 
piecenum = sleeve; 
} 

QueryWeapon1(piecenum) // where the shot is called from 
{ 
if (shooting_num==1) 
     {  
     	piecenum=firepoint1;     
     }

     if (shooting_num==2)
     {   
     	piecenum=firepoint2;
     } 
} 

Killed(severity, corpsetype) // how it explodes 
{ 
if( severity <= 25 ) 
{ 
corpsetype = 1; 
explode base type BITMAPONLY | BITMAP1; 
explode sleeve type BITMAPONLY | BITMAP1;  
explode turret type BITMAPONLY | BITMAP4; 
return (0); 
} 
if( severity <= 80 ) 
{ 
corpsetype = 2; 
explode base type BITMAPONLY | BITMAP4; 
explode sleeve type FALL | BITMAP1;  
explode turret type SHATTER | BITMAP4; 
return (0); 
} 
if( severity <= 99 ) 
{ 
corpsetype = 3; 
explode base type BITMAPONLY | BITMAP1; 
explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1; 
explode turret type SHATTER | BITMAP4; 
return (0); 
} 
corpsetype = 3; 
explode sleeve type FALL | SMOKE | FIRE | EXPLODE_ON_HIT | BITMAP1; 
explode base type BITMAPONLY | BITMAP3; 
explode turret type SHATTER | EXPLODE_ON_HIT | BITMAP4; 
} 
