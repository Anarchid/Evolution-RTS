#define TA        // This is a TA script

#include "sfxtype.h"
#include "exptype.h"

piece  base, top, middlespinnything, rightspinnything, nano1, nano2, dirt;

static-var Static_Var_1, Static_Var_3, Static_Var_5, statechg_DesiredState, statechg_StateChanging, bMoving, terraintype, building, moving;

#define nanoflame 1024+0

SmokeUnit(healthpercent, sleeptime, smoketype)
{
   while( get BUILD_PERCENT_LEFT )
   {
      sleep 400;
   }
   while( TRUE )
   {
      healthpercent = get HEALTH;
      if( healthpercent < 66 )
      {
         smoketype = 256 | 2;
         if( Rand( 1, 66 ) < healthpercent )
         {
            smoketype = 256 | 1;
         }
         emit-sfx smoketype from base;
      }
      sleeptime = healthpercent * 50;
      if( sleeptime < 200 )
      {
         sleeptime = 200;
      }
      sleep sleeptime;
   }
}

Buildingfx()
{
   while(building)
   {

              emit-sfx nanoflame from nano1;
//              emit-sfx nanoflame from nano2;
                
        sleep 5;
   }
}

Go()
{
   turn base to y-axis Static_Var_1 speed <160.000000>;
        wait-for-turn base around y-axis;
        Static_Var_3 = 1;
   if( Static_Var_3 )
   {

   }
   sleep 15;
   set INBUILDSTANCE to 1;
}

Stop()
{
   turn base to y-axis <0.000000> speed <160.000000>;
        wait-for-turn base around y-axis;
        set INBUILDSTANCE to 0;
   if( Static_Var_3 )
   {

   }
   sleep 20;
   Static_Var_3 = 0;
}

InitState()
{
   statechg_DesiredState = TRUE;
   statechg_StateChanging = FALSE;
}

RequestState(requestedstate, currentstate)
{
   if( statechg_StateChanging )
   {
      statechg_DesiredState = requestedstate;
      return (0);
   }
   statechg_StateChanging = TRUE;
   currentstate = statechg_DesiredState;
   statechg_DesiredState = requestedstate;
   while( statechg_DesiredState != currentstate )
   {
      if( statechg_DesiredState == 0 )
      {
         call-script Go();
         currentstate = 0;
      }
      if( statechg_DesiredState == 1 )
      {
         call-script Stop();
         currentstate = 1;
      }
   }
   statechg_StateChanging = FALSE;
}


EmitWakes()
{
   while( TRUE )
   {
      if( bMoving )
      {
         emit-sfx 2 from base;
      }
      sleep 300;
   }
}

setSFXoccupy(setSFXoccupy_argument)
{
terraintype = setSFXoccupy_argument;

                if(terraintype == 2)
      {
                move base to y-axis [-0.85] speed [50];
                set UPRIGHT to 1;
                }
      else
      {
                move base to y-axis [0.0] speed [50];
                set UPRIGHT to 0;
                }
                if(terraintype == 4)
      {
                move base to y-axis [0] speed [50];
                set UPRIGHT to 0;
                }
      else
      {
                move base to y-axis [-0.85] speed [50];
                set UPRIGHT to 1;
                }
}

Thrust()
{
   while( TRUE )
   {
      if (moving)    
      {
              emit-sfx 1025 + 0 from dirt;
                }
        sleep 400;    
   }
}

Create()
{
   Static_Var_3 = 0;
   Static_Var_1 = 0;
   call-script InitState();
        start-script setSFXoccupy();
        start-script Thrust();
        start-script EmitWakes();
        start-script SmokeUnit();
   turn top to x-axis <90.000000> now; 
}

StartBuilding(Func_Var_1)
{
   building=1;
   Static_Var_1 = Func_Var_1;
   start-script RequestState(0);
   spin middlespinnything around y-axis speed <100>;  
   spin rightspinnything around x-axis speed <100>;
   turn top to x-axis <0.000000> speed <300.000000>;
   start-script Buildingfx();  
}

StopBuilding()
{
   building=0;
   start-script RequestState(1);
   stop-spin middlespinnything around y-axis decelerate <15>;  
   stop-spin rightspinnything around x-axis decelerate <15>; 
   turn top to x-axis <90.000000> speed <30.000000>; 
}

QueryNanoPiece(piecenum)
{
   if( Static_Var_5 == 0 )
   {
      piecenum = nano1;
      Static_Var_5 = 1;

   }
   if( Static_Var_5 == 1 )
   {
      piecenum = nano2;
      Static_Var_5 = 2;
      return (0);
   }
   if( Static_Var_5 == 2 )
   {
      piecenum = nano1;
      Static_Var_5 = 0;

   }
}

TargetHeading(Func_Var_1)
{
   Static_Var_1 = 0 - Func_Var_1;
}

StartMoving()
{
   bMoving = TRUE;
   moving=1;
}

StopMoving()
{
   bMoving = FALSE;
   moving=0;
}

Killed(severity, corpsetype)
{
   if( severity <= 25 )
   {
      corpsetype = 1;
      explode base type BITMAPONLY | BITMAP2;
      return (0);
   }
   if( severity <= 50 )
   {
      corpsetype = 2;
      explode base type BITMAPONLY | BITMAP2;
      return (0);
   }
   if( severity <= 99 )
   {
      corpsetype = 3;
      explode base type BITMAPONLY | BITMAP2;
      return (0);
   }
   corpsetype = 3;
   explode base type BITMAPONLY | BITMAP2;
}
